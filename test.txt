# ==================================   conftest.py   ========================================#
import asyncio
import pytest
import pytest_asyncio
from httpx import AsyncClient, ASGITransport
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlmodel import SQLModel

from src.main import app
from src.db.main import get_session

TEST_DATABASE_URL = "sqlite+aiosqlite:///:memory:"

engine = create_async_engine(TEST_DATABASE_URL, future=True, echo=False)
TestingSessionLocal = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)


async def override_get_session():
    async with TestingSessionLocal() as session:
        yield session


@pytest.fixture(scope="session", autouse=True)
def create_test_db():
    async def init_models():
        async with engine.begin() as conn:
            await conn.run_sync(SQLModel.metadata.create_all)

    asyncio.get_event_loop().run_until_complete(init_models())


@pytest_asyncio.fixture
async def client():
    app.dependency_overrides[get_session] = override_get_session
    transport = ASGITransport(app=app)
    async with AsyncClient(transport=transport, base_url="http://localhost") as ac:
        yield ac
    app.dependency_overrides.clear()


#  =============================   test_auth.py   ================================
import pytest


@pytest.mark.asyncio
async def test_signup_and_login(client):
    res = await client.post(
        "/api/v1/auth/signup",
        json={
            "first_name": "Test",
            "last_name": "User",
            "username": "tester",
            "email": "tester@gmail.com",
            "password": "secret123",
        },
    )
    print("Response JSON: ", res.json())
    assert res.status_code == 201
    data = res.json()
    assert "user" in data

    res = await client.post(
        url="/api/v1/auth/login",
        json={"email": "tester@example.com", "password": "secret123"},
    )
    assert res.status_code == 200
    data = res.json()
    assert "access_token" in data
    assert "refresh_token" in data


# ===================================  test_google   =====================================#
import pytest
from src.auth.service import GoogleAuthService


@pytest.mark.asyncio
async def test_google_callback_creates_user(client, monkeypatch):
    fake_token_data = {"id_token": "fake_id_token"}
    fake_idinfo = {
        "sub": "google123",
        "email": "googleuser@exmaple.com",
        "given_name": "Google",
        "family_name": "User",
    }

    # Mock Google token exchange
    async def fake_post(*args, **kwargs):
        class FakeResponse:
            def json(self):
                return fake_token_data

        return FakeResponse()

    # Mock ID token verification
    monkeypatch.setattr(
        "src.auth.services.id_token.verify_oauth2_token", lambda *a, **kw: fake_idinfo
    )
    monkeypatch.setattr("httpx.AsyncClient.post", fake_post)

    service = GoogleAuthService()

    # Simulate callback
    user_data = await service.google_callback("fake_code", session=None)
    assert "access_token" in user_data
    assert user_data["user"]["email"] == "googleuser@example.com"
    

# =================================  test_password   =================================#
import pytest
from unittest.mock import AsyncMock
from src.auth.service import PasswordResetService


@pytest.mark.asyncio
async def test_forgot_paasword_flow(client, monkeypatch):
    # Patch FastMail.send_message to avoid real emails
    monkeypatch.setattr(PasswordResetService, "send_mail_test", AsyncMock())
    monkeypatch.setattr(PasswordResetService, "send_reset_email", AsyncMock())

    # Create User
    await client.post(
        "/api/v1/auth/signup",
        json={
            "username": "resetuser",
            "email": "reset@example.com",
            "first_name": "Reset",
            "last_name": "User",
            "password": "reset123",
        },
    )

    # Forgot password request
    res = await client.post(
        "/api/v1/auth/forgot-password", json={"email": "reset@example.com"}
    )
    assert res.status_code == 200
    assert res.json()["message"] == "Password reset email sent"
